// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// $ npx prisma studio

model Test {
  id   Int     @id @default(autoincrement())
  name String?
}

model User {
  id           Int                @id @default(autoincrement())
  username     String             @unique
  password     String
  email        String             @unique
  name         String
  isMember     Boolean            @default(false)
  isAdmin      Boolean            @default(false)
  isSuperamin  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  lastLogin    DateTime?
  isActive     Boolean            @default(true)
  //
  company      Company            @relation(fields: [companyId], references: [id])
  companyId    Int                @default(0)
  groups       UserGroups[]
  notes        UserNotes[]
  reservations UserReservations[]
}

model Group {
  id           Int           @id @default(autoincrement())
  groupCode    String        @unique
  groupName    String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  //
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    Int
  notes        Note[]
  users        UserGroups[]
  reservations Reservation[]
}

model Company {
  id           Int           @id @default(autoincrement())
  companyName  String
  //
  groups       Group[]
  users        User[]
  notes        Note[]
  reservations Reservation[]
}

model Note {
  id            Int         @id @default(autoincrement())
  createdBy     Int
  progress      Int         @default(0)
  status        Status      @default(pending)
  contents      Json
  userCount     Int
  //
  group         Group       @relation(fields: [groupId], references: [id])
  groupId       Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  company       Company     @relation(fields: [companyId], references: [id])
  companyId     Int
  userNotes     UserNotes[]
}

enum Status {
  error
  complete
  pending
}

model Reservation {
  id        Int                @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  users     UserReservations[]
  notes     Note[]
  groupId   Int
  group     Group              @relation(fields: [groupId], references: [id])
  company   Company?           @relation(fields: [companyId], references: [id])
  companyId Int?
}

// Many-to-Many relation models

model UserGroups {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, groupId])
}

model UserNotes {
  userId Int
  noteId Int
  user   User @relation(fields: [userId], references: [id])
  note   Note @relation(fields: [noteId], references: [id])

  @@id([userId, noteId])
}

model UserReservations {
  userId        Int
  reservationId Int
  user          User        @relation(fields: [userId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@id([userId, reservationId])
}
